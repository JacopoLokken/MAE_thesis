ggplot(monthly_data,
aes(x = month, y = monthly_downloads, color = package, group = package)) +
geom_line(linewidth = 1) +
geom_point(size = 2) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom",
plot.title = element_text(hjust = 0.5)
) +
labs(
x = "Month",
y = "Number of Downloads",
color = "Package"
) +
scale_y_continuous(labels = function(x) format(x, big.mark = ",", scientific = FALSE)) +
scale_x_discrete(breaks = unique(monthly_data$month)[seq(1, length(unique(monthly_data$month)), by = 4)])
library("randomForest")
library("PASWR2")
library("cranlogs")
library("ggplot")
library(ggplot)
install.packages("ggplot")
####
#### Random Forest packages downloads overview ####
####
rf_packages <- c("randomForest", "ranger", "party", "randomForestSRC", "h2o", "Rborist")
# Get data for last 12 months
last_year <- cran_downloads(packages = rf_packages,
from = Sys.Date() - 365,
to = Sys.Date())
last_year$month <- format(last_year$date, "%Y-%m") # And etract month
# Aggregate and sort the data
monthly_data <- aggregate(count ~ package + month, data = last_year, FUN = sum)
names(monthly_data)[names(monthly_data) == "count"] <- "monthly_downloads"
monthly_data <- monthly_data[order(monthly_data$month, -monthly_data$monthly_downloads), ]
# Create visualization with regular numbers on y-axis
ggplot(monthly_data,
aes(x = month, y = monthly_downloads, color = package, group = package)) +
geom_line(linewidth = 1) +
geom_point(size = 2) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom",
plot.title = element_text(hjust = 0.5)
) +
labs(
x = "Month",
y = "Number of Downloads",
color = "Package"
) +
scale_y_continuous(labels = scales::comma) +
scale_x_discrete(breaks = unique(monthly_data$month))
ggplot(monthly_data,
aes(x = month, y = monthly_downloads, color = package, group = package)) +
geom_line(linewidth = 1) +
geom_point(size = 2) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom",
plot.title = element_text(hjust = 0.5)
) +
labs(
x = "Month",
y = "Number of Downloads",
color = "Package"
) +
scale_y_continuous(labels = function(x) format(x, big.mark = ",", scientific = FALSE)) +
scale_x_discrete(breaks = unique(monthly_data$month)[seq(1, length(unique(monthly_data$month)), by = 4)])
# Convert month string to Date by assuming the first day of each month
monthly_data$month_date <- as.Date(paste0(monthly_data$month, "-01"))
ggplot(monthly_data,
aes(x = month_date, y = monthly_downloads, color = package, group = package)) +
geom_line(linewidth = 1) +
geom_point(size = 2) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom",
plot.title = element_text(hjust = 0.5)
) +
labs(
x = "Month",
y = "Number of Downloads",
color = "Package"
) +
scale_y_continuous(labels = function(x) format(x, big.mark = ",", scientific = FALSE)) +
scale_x_date(date_breaks = "4 months", date_labels = "%Y-%m")
# Convert month string to Date by assuming the first day of each month
monthly_data$month_date <- as.Date(paste0(monthly_data$month, "-01"))
ggplot(monthly_data,
aes(x = month_date, y = monthly_downloads, color = package, group = package)) +
geom_line(linewidth = 1) +
geom_point(size = 2) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom",
plot.title = element_text(hjust = 0.5)
) +
labs(
x = "Month",
y = "Number of Downloads",
color = "Package"
) +
scale_y_continuous(labels = function(x) format(x, big.mark = ",", scientific = FALSE)) +
scale_x_date(
limits = c(as.Date("2020-01-01"), max(monthly_data$month_date)),
date_breaks = "4 months",
date_labels = "%Y-%m"
)
365*5
####
#### Random Forest packages downloads overview ####
####
rf_packages <- c("randomForest", "ranger", "party", "randomForestSRC", "h2o", "Rborist")
# Get data for last 12 months
last_year <- cran_downloads(packages = rf_packages,
from = Sys.Date() - 1825,
to = Sys.Date())
last_year$month <- format(last_year$date, "%Y-%m") # And etract month
# Aggregate and sort the data
monthly_data <- aggregate(count ~ package + month, data = last_year, FUN = sum)
names(monthly_data)[names(monthly_data) == "count"] <- "monthly_downloads"
monthly_data <- monthly_data[order(monthly_data$month, -monthly_data$monthly_downloads), ]
# Create visualization with regular numbers on y-axis
ggplot(monthly_data,
aes(x = month, y = monthly_downloads, color = package, group = package)) +
geom_line(linewidth = 1) +
geom_point(size = 2) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom",
plot.title = element_text(hjust = 0.5)
) +
labs(
x = "Month",
y = "Number of Downloads",
color = "Package"
) +
scale_y_continuous(labels = scales::comma) +
scale_x_discrete(breaks = unique(monthly_data$month))
#### Random Forest packages downloads overview ####
rf_packages <- c("randomForest", "ranger", "party", "randomForestSRC", "h2o", "Rborist")
# Get data for the last 5 years (1825 days)
last_year <- cran_downloads(packages = rf_packages,
from = Sys.Date() - 1825,
to = Sys.Date())
# Create 4-month interval groups starting from 2020-01-01
breaks <- seq(as.Date("2020-01-01"), Sys.Date(), by = "4 months")
# The labels will be the starting month of each interval in "YYYY-MM" format.
last_year$four_month <- cut(last_year$date,
breaks = breaks,
include.lowest = TRUE,
right = FALSE,
labels = format(breaks[-length(breaks)], "%Y-%m"))
# Aggregate and sort the data by the 4-month intervals
monthly_data <- aggregate(count ~ package + four_month, data = last_year, FUN = sum)
names(monthly_data)[names(monthly_data) == "count"] <- "four_month_downloads"
monthly_data <- monthly_data[order(monthly_data$four_month, -monthly_data$four_month_downloads), ]
# Create visualization with regular numbers on y-axis
ggplot(monthly_data,
aes(x = four_month, y = four_month_downloads, color = package, group = package)) +
geom_line(linewidth = 1) +
geom_point(size = 2) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom",
plot.title = element_text(hjust = 0.5)
) +
labs(
x = "Month",
y = "Number of Downloads",
color = "Package"
) +
scale_y_continuous(labels = scales::comma) +
scale_x_discrete(breaks = unique(monthly_data$four_month))
#### Random Forest packages downloads overview ####
rf_packages <- c("randomForest", "ranger", "party", "randomForestSRC", "h2o", "Rborist")
# Get data for the last 5 years (1825 days)
last_year <- cran_downloads(packages = rf_packages,
from = Sys.Date() - 1825,
to = Sys.Date())
# Create 4-month interval groups starting from 2020-01-01
# Extend the breaks to include today's date by adding one extra day
breaks <- seq(as.Date("2020-01-01"), Sys.Date() + 1, by = "4 months")
# The labels will be the starting month of each interval in "YYYY-MM" format.
last_year$four_month <- cut(last_year$date,
breaks = breaks,
include.lowest = TRUE,
right = FALSE,
labels = format(breaks[-length(breaks)], "%Y-%m"))
# Aggregate and sort the data by the 4-month intervals
monthly_data <- aggregate(count ~ package + four_month, data = last_year, FUN = sum)
names(monthly_data)[names(monthly_data) == "count"] <- "four_month_downloads"
monthly_data <- monthly_data[order(monthly_data$four_month, -monthly_data$four_month_downloads), ]
# Create visualization with regular numbers on y-axis
ggplot(monthly_data,
aes(x = four_month, y = four_month_downloads, color = package, group = package)) +
geom_line(linewidth = 1) +
geom_point(size = 2) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom",
plot.title = element_text(hjust = 0.5)
) +
labs(
x = "Month",
y = "Number of Downloads",
color = "Package"
) +
scale_y_continuous(labels = scales::comma) +
scale_x_discrete(breaks = unique(monthly_data$four_month))
#### Random Forest packages downloads overview ####
rf_packages <- c("randomForest", "ranger", "party", "randomForestSRC", "h2o", "Rborist")
# Get data for last 5 years (1825 days)
last_year <- cran_downloads(packages = rf_packages,
from = Sys.Date() - 1825,
to = Sys.Date())
last_year$month <- format(last_year$date, "%Y-%m") # And extract month
# Aggregate and sort the data
monthly_data <- aggregate(count ~ package + month, data = last_year, FUN = sum)
names(monthly_data)[names(monthly_data) == "count"] <- "monthly_downloads"
monthly_data <- monthly_data[order(monthly_data$month, -monthly_data$monthly_downloads), ]
# Create visualization with regular numbers on y-axis
ggplot(monthly_data,
aes(x = month, y = monthly_downloads, color = package, group = package)) +
geom_line(linewidth = 1) +
geom_point(size = 2) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom",
plot.title = element_text(hjust = 0.5)
) +
labs(
x = "Month",
y = "Number of Downloads",
color = "Package"
) +
scale_y_continuous(labels = scales::comma) +
scale_x_discrete(breaks = unique(monthly_data$month)[seq(1, length(unique(monthly_data$month)), by = 4)])
#### Random Forest packages downloads overview ####
rf_packages <- c("randomForest", "ranger", "party", "randomForestSRC", "h2o", "Rborist")
# Get data for last 5 years (1825 days)
last_year <- cran_downloads(packages = rf_packages,
from = Sys.Date() - 1500,
to = Sys.Date())
last_year$month <- format(last_year$date, "%Y-%m") # And extract month
# Aggregate and sort the data
monthly_data <- aggregate(count ~ package + month, data = last_year, FUN = sum)
names(monthly_data)[names(monthly_data) == "count"] <- "monthly_downloads"
monthly_data <- monthly_data[order(monthly_data$month, -monthly_data$monthly_downloads), ]
# Create visualization with regular numbers on y-axis
ggplot(monthly_data,
aes(x = month, y = monthly_downloads, color = package, group = package)) +
geom_line(linewidth = 1) +
geom_point(size = 2) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom",
plot.title = element_text(hjust = 0.5)
) +
labs(
x = "Month",
y = "Number of Downloads",
color = "Package"
) +
scale_y_continuous(labels = scales::comma) +
scale_x_discrete(breaks = unique(monthly_data$month)[seq(1, length(unique(monthly_data$month)), by = 4)])
#### Random Forest packages downloads overview ####
rf_packages <- c("randomForest", "ranger", "party", "randomForestSRC", "h2o", "Rborist")
# Get data for last 5 years (1825 days)
last_year <- cran_downloads(packages = rf_packages,
from = Sys.Date() - 1000,
to = Sys.Date())
last_year$month <- format(last_year$date, "%Y-%m") # And extract month
# Aggregate and sort the data
monthly_data <- aggregate(count ~ package + month, data = last_year, FUN = sum)
names(monthly_data)[names(monthly_data) == "count"] <- "monthly_downloads"
monthly_data <- monthly_data[order(monthly_data$month, -monthly_data$monthly_downloads), ]
# Create visualization with regular numbers on y-axis
ggplot(monthly_data,
aes(x = month, y = monthly_downloads, color = package, group = package)) +
geom_line(linewidth = 1) +
geom_point(size = 2) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom",
plot.title = element_text(hjust = 0.5)
) +
labs(
x = "Month",
y = "Number of Downloads",
color = "Package"
) +
scale_y_continuous(labels = scales::comma) +
scale_x_discrete(breaks = unique(monthly_data$month)[seq(1, length(unique(monthly_data$month)), by = 4)])
#### Random Forest packages downloads overview ####
rf_packages <- c("randomForest", "ranger", "party", "randomForestSRC", "h2o", "Rborist")
# Get data for last 5 years (1825 days)
last_year <- cran_downloads(packages = rf_packages,
from = Sys.Date() - 1070,
to = Sys.Date())
last_year$month <- format(last_year$date, "%Y-%m") # And extract month
# Aggregate and sort the data
monthly_data <- aggregate(count ~ package + month, data = last_year, FUN = sum)
names(monthly_data)[names(monthly_data) == "count"] <- "monthly_downloads"
monthly_data <- monthly_data[order(monthly_data$month, -monthly_data$monthly_downloads), ]
# Create visualization with regular numbers on y-axis
ggplot(monthly_data,
aes(x = month, y = monthly_downloads, color = package, group = package)) +
geom_line(linewidth = 1) +
geom_point(size = 2) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom",
plot.title = element_text(hjust = 0.5)
) +
labs(
x = "Month",
y = "Number of Downloads",
color = "Package"
) +
scale_y_continuous(labels = scales::comma) +
scale_x_discrete(breaks = unique(monthly_data$month)[seq(1, length(unique(monthly_data$month)), by = 4)])
